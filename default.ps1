# Script Properties
Framework "4.5.2"
properties {
    $baseDirectory = Resolve-Path .\
    $sourceDirectory = "$baseDirectory\src"

    $company = "PsakeZero"
    $product = "WebApp"

    $outputDirectory = "$baseDirectory\artifacts"
    $packagesDirectory = "$sourceDirectory\packages"
    $packagesOutputDirectory = "$outputDirectory\packages"
    $environment = "Local"

    # msbuild settings
    $solution = "Default.sln"
    $solutionFile = "$sourceDirectory\$solution"
    $verbosity = "normal"
    $buildConfiguration = "Release"
    $buildPlatform = "Any CPU"
    $version = "1.0.0"
    $runOctoPack = "false"

    # tools
    $nugetExe = "$sourceDirectory\.nuget\nuget.exe"
    $migrator = "$sourceDirectory\packages\roundhouse.0.8.6\bin\rh.exe"
    $sqlPackageExe = "$baseDirectory\tools\SqlPackage.13.0.3450\sqlPackage.exe"

    # database
    $databaseServer = "localhost\sqlexpress2014"
    $integratedSecurity = "Integrated Security=True"
}
# Script Tasks
task Default -depends Clean, Init, Compile
task Clean {
    NukeDirectory $outputDirectory\**

    @("bin","obj") | ForEach-Object {
        NukeDirectory "$sourceDirectory\**\$_\"
    }
}
task Init {
    Assert(Test-Path $nugetExe) -failureMessage "Nuget command line tool is missing at $nugetExe"

    Write-Host "Creating build output directory at $outputDirectory"
    CreateDirectory $outputDirectory
}
task Restore-Packages {
    Exec { & $nugetExe "restore" $solutionFile }
}
task Clean-Packages {
    Remove-Item -Force -Recurse $packagesDirectory;
    CreateDirectory $packagesDirectory;
}
task Compile -depends Init, Restore-Packages, New-AssemblyInfo {
    Exec {
        msbuild $solutionFile `
            /verbosity:$verbosity `
            /p:Configuration=$buildConfiguration `
            /p:Platform=$buildPlatform
    }
}

task New-AssemblyInfo {
    CreateCommonAssemblyInfo -version $version -buildConfiguration $buildConfiguration  -filename "$sourceDirectory\CommonAssemblyInfo.cs"
}

# Script Functions
function CreateDirectory($directory) {
    Write-Host "Creating $directory"
    New-Item $directory -ItemType Directory -Force | Out-Null
}
function NukeDirectory($directory) {
    if(Test-Path $directory){
        Write-Host "Removing $directory"
        Remove-Item $directory -Force -Recurse | Out-Null
    } else {
        Write-Host "$directory does not exist"
    }
}
function CreateCommonAssemblyInfo($version,$buildConfiguration,$filename) {
$year = (Get-Date).Year
"using System;
using System.Reflection;
using System.Runtime.InteropServices;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
[assembly: ComVisibleAttribute(false)]
[assembly: AssemblyVersionAttribute(""$version"")]
[assembly: AssemblyFileVersionAttribute(""$version"")]
[assembly: AssemblyCopyrightAttribute(""Copyright $year"")]
[assembly: AssemblyProductAttribute(""$product"")]
[assembly: AssemblyCompanyAttribute(""$company"")]
[assembly: AssemblyConfigurationAttribute(""$buildConfiguration"")]
[assembly: AssemblyInformationalVersionAttribute(""$version"")]" | out-file -FilePath $filename -encoding "ASCII"
}
